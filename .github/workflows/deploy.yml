name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
        
      - name: Build with Astro
        run: |
          npm run build
        env:
          SITE: ${{ steps.pages.outputs.origin }}
          BASE_URL: ${{ steps.pages.outputs.base_path }}/
          
      - name: Optimize images
        run: |
          # Install imagemin-cli for image optimization
          npm install -g imagemin-cli imagemin-webp imagemin-mozjpeg imagemin-pngquant
          
          # Optimize images in dist folder
          find dist -name "*.jpg" -o -name "*.jpeg" | xargs -I {} imagemin {} --out-dir=dist --plugin=mozjpeg
          find dist -name "*.png" | xargs -I {} imagemin {} --out-dir=dist --plugin=pngquant
          
      - name: Generate additional SEO files
        run: |
          # Create additional SEO files
          echo "User-agent: *
          Allow: /
          Sitemap: ${{ steps.pages.outputs.origin }}${{ steps.pages.outputs.base_path }}/sitemap.xml" > dist/robots.txt
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  deploy:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  lighthouse:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build site
        run: npm run build
        
      - name: Serve site
        run: |
          npm install -g serve
          serve -s dist -p 3000 &
          sleep 5
          
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  performance-budget:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: github-pages
          path: ./dist
          
      - name: Check bundle size
        run: |
          # Check if bundle sizes are within budget
          echo "Checking bundle sizes..."
          
          # JavaScript bundle size check (should be < 100KB)
          JS_SIZE=$(find dist -name "*.js" -exec du -b {} + | awk '{sum+=$1} END {print sum}')
          if [ $JS_SIZE -gt 102400 ]; then
            echo "❌ JavaScript bundle too large: ${JS_SIZE} bytes (limit: 100KB)"
            exit 1
          else
            echo "✅ JavaScript bundle size OK: ${JS_SIZE} bytes"
          fi
          
          # CSS bundle size check (should be < 50KB)
          CSS_SIZE=$(find dist -name "*.css" -exec du -b {} + | awk '{sum+=$1} END {print sum}')
          if [ $CSS_SIZE -gt 51200 ]; then
            echo "❌ CSS bundle too large: ${CSS_SIZE} bytes (limit: 50KB)"
            exit 1
          else
            echo "✅ CSS bundle size OK: ${CSS_SIZE} bytes"
          fi
          
          # Total page size check (should be < 500KB)
          TOTAL_SIZE=$(du -sb dist | cut -f1)
          if [ $TOTAL_SIZE -gt 512000 ]; then
            echo "❌ Total bundle too large: ${TOTAL_SIZE} bytes (limit: 500KB)"
            exit 1
          else
            echo "✅ Total bundle size OK: ${TOTAL_SIZE} bytes"
          fi