---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import PostCard from '../../components/PostCard.astro';

const allPosts = await getCollection('blog');
const sortedPosts = allPosts
  .filter(post => !post.data.draft)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// 태그 목록 생성
const allTags = [...new Set(allPosts.flatMap(post => post.data.tags))].sort();
---

<BaseLayout title="모든 포스트 - 벨로그 스타일 블로그" description="모든 블로그 포스트를 확인해보세요.">
  <Header />
  
  <main class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- 페이지 헤더 -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900 dark:text-dark-text mb-4">
        All Posts
      </h1>
      <p class="text-gray-600 dark:text-dark-subtext">
        {sortedPosts.length} posts in total.
      </p>
    </div>

    <!-- 태그 필터 -->
    {allTags.length > 0 && (
      <div class="mb-8">
        <h2 class="text-lg font-semibold text-gray-900 dark:text-dark-text mb-4">Tags</h2>
        <div class="flex flex-wrap gap-2">
          <button 
            class="tag-filter px-4 py-2 text-sm bg-primary-600 text-white rounded-full hover:bg-primary-700 transition-colors active"
            data-tag="all"
          >
            All
          </button>
          {allTags.map(tag => (
            <button 
              class="tag-filter px-4 py-2 text-sm bg-gray-200 dark:bg-dark-muted text-gray-700 dark:text-dark-text rounded-full hover:bg-gray-300 dark:hover:bg-dark-accent/20 transition-colors"
              data-tag={tag}
            >
              {tag}
            </button>
          ))}
        </div>
      </div>
    )}

    <!-- 포스트 그리드 -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="posts-grid">
      {sortedPosts.map((post) => (
        <div class="post-item" data-tags={JSON.stringify(post.data.tags)}>
          <PostCard
            title={post.data.title}
            description={post.data.description}
            pubDate={post.data.pubDate}
            heroImage={post.data.heroImage}
            tags={post.data.tags}
            slug={post.slug}
            author={post.data.author}
          />
        </div>
      ))}
    </div>

    {sortedPosts.length === 0 && (
      <div class="text-center py-12">
        <p class="text-gray-500 dark:text-dark-subtext">No posts yet.</p>
      </div>
    )}
  </main>
</BaseLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tagFilters = document.querySelectorAll('.tag-filter');
    const postItems = document.querySelectorAll('.post-item');

    tagFilters.forEach(filter => {
      filter.addEventListener('click', () => {
        const selectedTag = filter.getAttribute('data-tag');
        
        // 활성 태그 업데이트
        tagFilters.forEach(f => {
          f.classList.remove('active', 'bg-primary-600', 'text-white');
          f.classList.add('bg-gray-200', 'dark:bg-dark-muted', 'text-gray-700', 'dark:text-dark-text');
        });
        
        filter.classList.add('active', 'bg-primary-600', 'text-white');
        filter.classList.remove('bg-gray-200', 'dark:bg-dark-muted', 'text-gray-700', 'dark:text-dark-text');

        // 포스트 필터링
        postItems.forEach(item => {
          const postTags = JSON.parse(item.getAttribute('data-tags') || '[]');
          
          if (selectedTag === 'all' || postTags.includes(selectedTag)) {
            item.style.display = 'block';
          } else {
            item.style.display = 'none';
          }
        });
      });
    });
  });
</script>