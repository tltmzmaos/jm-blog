---
// Page transition loading indicator
---

<!-- Page transition loading bar -->
<div id="page-loading-bar" class="fixed top-0 left-0 w-full h-1 bg-primary-500 dark:bg-primary-400 transform scale-x-0 origin-left transition-transform duration-300 ease-out z-50 hidden"></div>

<!-- Page transition overlay -->
<div id="page-loading-overlay" class="fixed inset-0 bg-white/80 dark:bg-dark-bg/80 backdrop-blur-sm z-40 hidden opacity-0 transition-opacity duration-200">
  <div class="flex items-center justify-center h-full">
    <div class="flex flex-col items-center space-y-4">
      <div class="w-8 h-8 border-4 border-primary-200 dark:border-primary-800 border-t-primary-600 dark:border-t-primary-400 rounded-full animate-spin"></div>
      <p class="text-sm text-gray-600 dark:text-gray-400">Loading...</p>
    </div>
  </div>
</div>

<script>
  // @ts-nocheck
  // Page transition effects
  document.addEventListener('DOMContentLoaded', () => {
    const loadingBar = document.getElementById('page-loading-bar');
    const loadingOverlay = document.getElementById('page-loading-overlay');
    let isNavigating = false;
    
    // Show loading indicator on navigation
    const showLoading = () => {
      if (isNavigating) return;
      isNavigating = true;
      
      if (loadingBar) {
        loadingBar.classList.remove('hidden');
        loadingBar.style.transform = 'scaleX(0.3)';
        
        // Simulate progress
        setTimeout(() => {
          loadingBar.style.transform = 'scaleX(0.6)';
        }, 100);
        
        setTimeout(() => {
          loadingBar.style.transform = 'scaleX(0.8)';
        }, 200);
      }
      
      // Show overlay for longer navigations
      setTimeout(() => {
        if (isNavigating && loadingOverlay) {
          loadingOverlay.classList.remove('hidden');
          loadingOverlay.style.opacity = '1';
        }
      }, 500);
    };
    
    // Hide loading indicator
    const hideLoading = () => {
      isNavigating = false;
      
      if (loadingBar) {
        loadingBar.style.transform = 'scaleX(1)';
        setTimeout(() => {
          loadingBar.classList.add('hidden');
          loadingBar.style.transform = 'scaleX(0)';
        }, 200);
      }
      
      if (loadingOverlay) {
        loadingOverlay.style.opacity = '0';
        setTimeout(() => {
          loadingOverlay.classList.add('hidden');
        }, 200);
      }
    };
    
    // Listen for navigation events
    document.addEventListener('click', (e) => {
      const link = e.target.closest('a');
      if (link && link.href && !link.target) {
        const url = new URL(link.href);
        // Only show loading for different pages, not hash links or external links
        if (url.origin === window.location.origin && 
            url.pathname !== window.location.pathname && 
            !link.href.includes('#')) {
          showLoading();
        }
      }
    });
    
    // Hide loading on page load
    window.addEventListener('load', hideLoading);
    
    // Hide loading on back/forward navigation
    window.addEventListener('pageshow', hideLoading);
    
    // Handle browser back/forward buttons
    window.addEventListener('popstate', showLoading);
  });
</script>

<style>
  #page-loading-bar {
    box-shadow: 0 0 10px rgba(59, 130, 246, 0.5);
  }
  
  .dark #page-loading-bar {
    box-shadow: 0 0 10px rgba(96, 165, 250, 0.5);
  }
</style>