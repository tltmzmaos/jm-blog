---
import { calculateReadingTime, ReadingTimeIcon } from '../utils/readingTime.js';
import OptimizedImage from './OptimizedImage.astro';

export interface Props {
  title: string;
  description: string;
  pubDate: Date;
  heroImage?: string;
  tags: string[];
  slug: string;
  author: string;
  content?: string;
}

const { title, description, pubDate, heroImage, tags, slug, author, content = '' } = Astro.props;

const baseUrl = import.meta.env.BASE_URL;
const formattedDate = new Intl.DateTimeFormat('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
}).format(pubDate);

const readingTime = calculateReadingTime(content || description);
---

<article class="bg-white dark:bg-dark-surface rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300 overflow-hidden border border-gray-200 dark:border-dark-border">
  <a href={`${baseUrl}posts/${slug}`} class="block">
    {heroImage && (
      <div class="aspect-video overflow-hidden">
        <OptimizedImage 
          src={heroImage} 
          alt={title}
          class="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
          loading="lazy"
          width={800}
          height={450}
        />
      </div>
    )}
    
    <div class="p-6">
      <div class="flex items-center text-sm text-gray-500 dark:text-dark-subtext mb-3">
        <span>{author}</span>
        <span class="mx-2">·</span>
        <time datetime={pubDate.toISOString()}>{formattedDate}</time>
        <span class="mx-2">·</span>
        <div class="flex items-center gap-1">
          <Fragment set:html={ReadingTimeIcon} />
          <span>{readingTime.text}</span>
        </div>
      </div>
      
      <h2 class="text-xl font-bold text-gray-900 dark:text-dark-text mb-3 line-clamp-2 hover:text-primary-600 dark:hover:text-dark-accent transition-colors">
        {title}
      </h2>
      
      <p class="text-gray-600 dark:text-dark-subtext mb-4 line-clamp-3">
        {description}
      </p>
      
      {tags.length > 0 && (
        <div class="flex flex-wrap gap-2">
          {tags.map(tag => (
            <span class="px-3 py-1 text-sm bg-gray-100 dark:bg-dark-muted text-gray-700 dark:text-dark-text rounded-full hover:bg-primary-100 dark:hover:bg-dark-accent/20 hover:text-primary-800 dark:hover:text-dark-accent transition-colors">
              {tag}
            </span>
          ))}
        </div>
      )}
    </div>
  </a>
</article>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>