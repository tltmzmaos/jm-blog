---
import { calculateReadingTime, ReadingTimeIcon } from '../utils/readingTime.js';
import OptimizedImage from './OptimizedImage.astro';

export interface Props {
  title: string;
  description: string;
  pubDate: Date;
  heroImage?: string;
  tags: string[];
  slug: string;
  author: string;
  content?: string;
}

const { title, description, pubDate, heroImage, tags, slug, author, content = '' } = Astro.props;

const baseUrl = import.meta.env.BASE_URL;
const formattedDate = new Intl.DateTimeFormat('en-US', {
  year: 'numeric',
  month: 'short',
  day: 'numeric'
}).format(pubDate);

const readingTime = calculateReadingTime(content || description);

// 디버깅을 위한 로그 (개발 환경에서만)
if (import.meta.env.DEV) {
  console.log('PostCard - Reading time calculation:', {
    title,
    contentLength: content?.length || 0,
    descriptionLength: description?.length || 0,
    readingTime: readingTime
  });
}
---

<article class="bg-white dark:bg-dark-surface rounded-lg shadow-sm hover:shadow-md transition-all duration-300 overflow-hidden border border-gray-200 dark:border-dark-border focus-within:ring-2 focus-within:ring-primary-500 focus-within:ring-offset-2">
  <a 
    href={`${baseUrl}posts/${slug}`} 
    class="block focus:outline-none"
    aria-label={`Read ${title} post`}
  >
    <div class="aspect-video overflow-hidden bg-gray-100 dark:bg-gray-800 relative group">
      {heroImage ? (
        <OptimizedImage 
          src={heroImage} 
          alt={`${title} cover image`}
          class="absolute inset-0 w-full h-full group-hover:scale-105 transition-transform duration-300"
          loading="lazy"
        />
      ) : (
        <!-- Fallback background -->
        <div class="w-full h-full bg-gradient-to-br from-primary-100 to-primary-200 dark:from-primary-900 dark:to-primary-800 flex items-center justify-center">
          <div class="text-primary-600 dark:text-primary-300 text-3xl sm:text-4xl font-bold opacity-20" aria-hidden="true">
            {title.charAt(0).toUpperCase()}
          </div>
        </div>
      )}
    </div>
    
    <div class="p-4 sm:p-6">
      <div class="flex items-center text-xs sm:text-sm text-gray-500 dark:text-dark-subtext mb-3 gap-1 whitespace-nowrap overflow-hidden">
        <span class="truncate">{author}</span>
        <span aria-hidden="true">·</span>
        <time datetime={pubDate.toISOString()} class="truncate">{formattedDate}</time>
        <span aria-hidden="true">·</span>
        <div class="flex items-center gap-1 flex-shrink-0">
          <span class="sr-only">Estimated reading time:</span>
          <Fragment set:html={ReadingTimeIcon} />
          <span>{readingTime.text}</span>
        </div>
      </div>
      
      <h2 class="text-lg sm:text-xl font-bold text-gray-900 dark:text-dark-text mb-3 line-clamp-2 group-hover:text-primary-600 dark:group-hover:text-dark-accent transition-colors">
        {title}
      </h2>
      
      <p class="text-sm sm:text-base text-gray-600 dark:text-dark-subtext mb-4 line-clamp-3">
        {description}
      </p>
      
      {tags.length > 0 && (
        <div class="flex flex-wrap gap-1 sm:gap-2" role="list" aria-label="Tags">
          {tags.map(tag => (
            <span 
              class="px-2 sm:px-3 py-1 text-xs sm:text-sm bg-gray-100 dark:bg-dark-muted text-gray-700 dark:text-dark-text rounded-full hover:bg-primary-100 dark:hover:bg-dark-accent/20 hover:text-primary-800 dark:hover:text-dark-accent transition-colors"
              role="listitem"
            >
              {tag}
            </span>
          ))}
        </div>
      )}
    </div>
  </a>
</article>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  

</style>