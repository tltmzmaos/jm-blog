---
export interface Props {
  postSlug: string;
  initialLikes?: number;
}

const { postSlug, initialLikes = 0 } = Astro.props;
---

<div class="like-container flex items-center space-x-2">
  <button
    class="like-button flex items-center space-x-2 px-4 py-2 bg-gray-100 dark:bg-gray-700 hover:bg-red-50 dark:hover:bg-red-900/20 text-gray-700 dark:text-gray-300 hover:text-red-600 dark:hover:text-red-400 rounded-lg transition-all duration-200 border border-gray-200 dark:border-gray-600"
    data-post-slug={postSlug}
    data-liked="false"
    data-count={initialLikes}
  >
    <svg
      class="like-icon w-5 h-5"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
      ></path>
    </svg>
    <span class="like-count font-medium">{initialLikes}</span>
  </button>
</div>

<script>
  // @ts-nocheck
  // GitHub Gist를 사용한 공유 좋아요 시스템
  
  class GistLikeStorage {
    constructor() {
      // 환경변수에서 GitHub 설정 가져오기
      this.githubToken = import.meta.env.PUBLIC_GITHUB_TOKEN;
      this.gistId = import.meta.env.PUBLIC_GIST_ID;
      this.useGist = !!(this.githubToken && this.gistId);
      
      console.log('GitHub Gist 설정:', {
        hasToken: !!this.githubToken,
        hasGistId: !!this.gistId,
        useGist: this.useGist,
        tokenLength: this.githubToken ? this.githubToken.length : 0,
        gistIdLength: this.gistId ? this.gistId.length : 0
      });
      
      // 캐시
      this.cache = null;
      this.cacheTime = 0;
      this.cacheTimeout = 30000; // 30초
    }
    
    async getLikes(postSlug) {
      if (this.useGist) {
        try {
          const data = await this.fetchFromGist();
          return data[postSlug] || 0;
        } catch (error) {
          console.error('GitHub Gist에서 좋아요 수 가져오기 실패:', error);
          return this.getLocalLikes(postSlug);
        }
      } else {
        return this.getLocalLikes(postSlug);
      }
    }
    
    async setLikes(postSlug, count) {
      if (this.useGist) {
        try {
          const data = await this.fetchFromGist();
          data[postSlug] = count;
          await this.saveToGist(data);
          
          // 로컬에도 백업 저장
          this.setLocalLikes(postSlug, count);
          return true;
        } catch (error) {
          console.error('GitHub Gist에 좋아요 수 저장 실패:', error);
          return this.setLocalLikes(postSlug, count);
        }
      } else {
        return this.setLocalLikes(postSlug, count);
      }
    }
    
    async fetchFromGist() {
      // 캐시 확인
      if (this.cache && (Date.now() - this.cacheTime) < this.cacheTimeout) {
        console.log('GitHub Gist: 캐시에서 데이터 반환');
        return this.cache;
      }
      
      console.log('GitHub Gist: API에서 데이터 가져오는 중...');
      console.log('Token 첫 10자:', this.githubToken.substring(0, 10) + '...');
      console.log('Gist ID:', this.gistId);
      
      const response = await fetch(`https://api.github.com/gists/${this.gistId}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${this.githubToken}`,
          'Accept': 'application/vnd.github.v3+json',
          'User-Agent': 'Blog-Like-System'
        }
      });
      
      console.log(`GitHub Gist GET 응답: ${response.status}`);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('GitHub Gist GET 에러 응답:', errorText);
        throw new Error(`GitHub Gist API 오류: ${response.status} - ${errorText}`);
      }
      
      const result = await response.json();
      const fileContent = result.files['blog-likes.json']?.content || '{}';
      this.cache = JSON.parse(fileContent);
      this.cacheTime = Date.now();
      
      console.log('GitHub Gist 데이터:', this.cache);
      return this.cache;
    }
    
    async saveToGist(data) {
      console.log('GitHub Gist: 데이터 저장 중...', data);
      
      const response = await fetch(`https://api.github.com/gists/${this.gistId}`, {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${this.githubToken}`,
          'Accept': 'application/vnd.github.v3+json',
          'Content-Type': 'application/json',
          'User-Agent': 'Blog-Like-System'
        },
        body: JSON.stringify({
          files: {
            'blog-likes.json': {
              content: JSON.stringify(data, null, 2)
            }
          }
        })
      });
      
      console.log(`GitHub Gist PATCH 응답: ${response.status}`);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('GitHub Gist 저장 실패:', errorText);
        throw new Error(`GitHub Gist 저장 오류: ${response.status} - ${errorText}`);
      }
      
      // 캐시 업데이트
      this.cache = data;
      this.cacheTime = Date.now();
      
      console.log('GitHub Gist 저장 성공');
      return true;
    }
    
    // 로컬 저장소 폴백 메서드
    getLocalLikes(postSlug) {
      const likes = localStorage.getItem(`likes-${postSlug}`);
      return parseInt(likes) || 0;
    }
    
    setLocalLikes(postSlug, count) {
      localStorage.setItem(`likes-${postSlug}`, count.toString());
      return true;
    }
    
    isLiked(postSlug) {
      return localStorage.getItem(`liked-${postSlug}`) === 'true';
    }
    
    setLiked(postSlug, liked) {
      localStorage.setItem(`liked-${postSlug}`, liked.toString());
    }
  }
  
  const likeStorage = new GistLikeStorage();
  
  function initializeLikeButtons() {
    const likeButtons = document.querySelectorAll('.like-button');
    console.log(`초기화: ${likeButtons.length}개의 좋아요 버튼 발견`);
    
    likeButtons.forEach(async (button, index) => {
      const postSlug = button.getAttribute('data-post-slug');
      console.log(`버튼 ${index}: postSlug = ${postSlug}`);
      
      // 이미 이벤트 리스너가 있는지 확인
      if (button.hasAttribute('data-initialized')) {
        console.log(`버튼 ${index} 이미 초기화됨, 건너뜀`);
        return;
      }
      
      try {
        // 서버에서 실제 좋아요 수 가져오기
        console.log(`${postSlug}: 서버에서 좋아요 수 가져오는 중...`);
        const serverLikes = await likeStorage.getLikes(postSlug);
        const isLiked = likeStorage.isLiked(postSlug);
        
        console.log(`${postSlug}: 서버 좋아요 수 = ${serverLikes}, 사용자 좋아요 상태 = ${isLiked}`);
        
        // 초기 상태 설정
        updateButtonAppearance(button, isLiked, serverLikes);
      } catch (error) {
        console.error(`${postSlug}: 좋아요 초기화 실패:`, error);
        // 에러 시 로컬 값 사용
        const isLiked = likeStorage.isLiked(postSlug);
        const localLikes = likeStorage.getLocalLikes(postSlug);
        updateButtonAppearance(button, isLiked, localLikes);
      }
      
      // 클릭 이벤트 리스너 추가
      button.addEventListener('click', handleLikeClick);
      button.setAttribute('data-initialized', 'true');
      console.log(`버튼 ${index} (${postSlug}) 초기화 완료`);
    });
  }
  
  async function handleLikeClick(event) {
    const button = event.currentTarget;
    const postSlug = button.getAttribute('data-post-slug');
    const isCurrentlyLiked = button.getAttribute('data-liked') === 'true';
    
    console.log('좋아요 클릭:', { postSlug, isCurrentlyLiked });
    
    // 현재 좋아요 수를 미리 저장 (innerHTML 변경 전에)
    const currentCountElement = button.querySelector('.like-count');
    const currentDisplayCount = currentCountElement ? parseInt(currentCountElement.textContent) || 0 : 0;

    // 버튼 비활성화 및 로딩 표시
    button.disabled = true;
    button.innerHTML = `
      <svg class="animate-spin w-5 h-5" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      <span class="ml-2">Processing...</span>
    `;
    
    try {
      // 현재 서버의 좋아요 수 가져오기
      const currentServerLikes = await likeStorage.getLikes(postSlug);
      
      // 새로운 상태 계산
      const newLikedState = !isCurrentlyLiked;
      const newCount = newLikedState ? currentServerLikes + 1 : Math.max(0, currentServerLikes - 1);
      
      // 서버에 저장
      await likeStorage.setLikes(postSlug, newCount);
      
      // 로컬 좋아요 상태 저장
      likeStorage.setLiked(postSlug, newLikedState);
      
      // UI 업데이트
      updateButtonAppearance(button, newLikedState, newCount);
      
      // 애니메이션 효과
      if (newLikedState) {
        animateHeart(button);
      }
      
    } catch (error) {
      console.error('좋아요 업데이트 실패:', error);
      
      // 에러 시 로컬 전용으로 폴백
      const newLikedState = !isCurrentlyLiked;
      const newCount = newLikedState ? currentDisplayCount + 1 : Math.max(0, currentDisplayCount - 1);
      
      likeStorage.setLiked(postSlug, newLikedState);
      likeStorage.setLocalLikes(postSlug, newCount);
      updateButtonAppearance(button, newLikedState, newCount);
      
      if (newLikedState) {
        animateHeart(button);
      }
    } finally {
      // 버튼 다시 활성화
      button.disabled = false;
    }
  }
  
  function updateButtonAppearance(button, isLiked, count) {
    try {
      // 데이터 속성 업데이트
      button.setAttribute('data-liked', isLiked.toString());
      button.setAttribute('data-count', count.toString());
      
      // 버튼 내용 복원
      button.innerHTML = `
        <svg class="like-icon w-5 h-5" fill="${isLiked ? 'currentColor' : 'none'}" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
        </svg>
        <span class="like-count font-medium">${count}</span>
      `;
      
      // 버튼 스타일 변경
      if (isLiked) {
        button.classList.remove('bg-gray-100', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300');
        button.classList.add('bg-red-50', 'dark:bg-red-900/20', 'text-red-600', 'dark:text-red-400');
      } else {
        button.classList.remove('bg-red-50', 'dark:bg-red-900/20', 'text-red-600', 'dark:text-red-400');
        button.classList.add('bg-gray-100', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300');
      }
    } catch (error) {
      console.error('버튼 상태 업데이트 에러:', error);
    }
  }
  
  function animateHeart(button) {
    // 펄스 애니메이션
    button.classList.add('animate-pulse');
    setTimeout(() => {
      button.classList.remove('animate-pulse');
    }, 600);
    
    // 하트 이모지 애니메이션
    const heart = document.createElement('div');
    heart.innerHTML = '❤️';
    heart.style.cssText = `
      position: absolute;
      left: 50%;
      top: -10px;
      transform: translateX(-50%);
      z-index: 1000;
      font-size: 18px;
      pointer-events: none;
      animation: heartFloat 1s ease-out forwards;
    `;
    
    // CSS 애니메이션 정의
    if (!document.querySelector('#heart-animation-style')) {
      const style = document.createElement('style');
      style.id = 'heart-animation-style';
      style.textContent = `
        @keyframes heartFloat {
          0% {
            opacity: 1;
            transform: translateX(-50%) translateY(0px) scale(1);
          }
          50% {
            transform: translateX(-50%) translateY(-10px) scale(1.2);
          }
          100% {
            opacity: 0;
            transform: translateX(-50%) translateY(-20px) scale(0.8);
          }
        }
      `;
      document.head.appendChild(style);
    }
    
    button.style.position = 'relative';
    button.appendChild(heart);
    
    // 애니메이션 완료 후 제거
    setTimeout(() => {
      if (heart.parentNode) {
        heart.parentNode.removeChild(heart);
      }
    }, 1000);
  }
  
  // DOM 로드 완료 시 초기화
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeLikeButtons);
  } else {
    initializeLikeButtons();
  }
</script>