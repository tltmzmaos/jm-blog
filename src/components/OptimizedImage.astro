---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
}

const { 
  src, 
  alt, 
  width, 
  height, 
  class: className = '', 
  loading = 'lazy'
} = Astro.props;

// 이미지 확장자 확인
const getImageFormat = (src: string) => {
  const ext = src.split('.').pop()?.toLowerCase();
  return ext || 'jpg';
};

// 원본 형식
const originalFormat = getImageFormat(src);

// 반응형 이미지 크기들
const sizes = width ? [
  Math.round(width * 0.5),
  Math.round(width * 0.75),
  width,
  Math.round(width * 1.5),
  Math.round(width * 2)
] : [400, 600, 800, 1200, 1600];

// srcset 생성 함수 (실제 최적화된 이미지가 없으므로 원본 사용)
const createSrcSet = (baseSrc: string) => {
  // 실제 환경에서는 다양한 크기의 이미지를 생성해야 하지만
  // 현재는 원본 이미지만 사용
  return sizes.map(size => `${baseSrc} ${size}w`).join(', ');
};
---

<div class={`relative overflow-hidden ${className}`}>
  <!-- Loading placeholder -->
  <div class="absolute inset-0 bg-gray-200 dark:bg-gray-700 animate-pulse flex items-center justify-center image-placeholder">
    <svg class="w-8 h-8 text-gray-400 dark:text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
    </svg>
  </div>
  
  <!-- Actual image -->
  <img 
    src={src}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    decoding="async"
    class="w-full h-full object-cover transition-opacity duration-300 opacity-0 optimized-image"
    style="aspect-ratio: auto;"
  />
</div>

<style>
  .optimized-image {
    transition: opacity 0.3s ease-in-out;
  }
  
  .image-placeholder {
    transition: opacity 0.3s ease-in-out;
  }
  
  @keyframes shimmer {
    0% {
      background-position: -200px 0;
    }
    100% {
      background-position: calc(200px + 100%) 0;
    }
  }
  
  .animate-pulse {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200px 100%;
    animation: shimmer 1.5s infinite;
  }
  
  .dark .animate-pulse {
    background: linear-gradient(90deg, #374151 25%, #4b5563 50%, #374151 75%);
    background-size: 200px 100%;
  }
</style>

<script>
  // @ts-nocheck
  // Enhanced image loading with placeholder handling
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('.optimized-image');
    
    images.forEach((img) => {
      const imageElement = img as HTMLImageElement;
      const placeholder = imageElement.parentElement?.querySelector('.image-placeholder');
      
      const showImage = () => {
        imageElement.style.opacity = '1';
        if (placeholder) {
          placeholder.style.opacity = '0';
          setTimeout(() => {
            placeholder.style.display = 'none';
          }, 300);
        }
      };
      
      if (imageElement.complete && imageElement.naturalHeight !== 0) {
        showImage();
      } else {
        imageElement.addEventListener('load', showImage);
        
        // Error handling - show broken image icon
        imageElement.addEventListener('error', () => {
          if (placeholder) {
            placeholder.innerHTML = `
              <svg class="w-8 h-8 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            `;
            placeholder.classList.remove('animate-pulse');
            placeholder.classList.add('bg-red-50', 'dark:bg-red-900/20');
          }
        });
      }
    });
  });
</script>