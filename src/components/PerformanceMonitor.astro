---
// Performance monitoring component for Core Web Vitals
---

<script>
  // @ts-nocheck
  // Web Vitals monitoring
  function initPerformanceMonitoring() {
    if (typeof window === 'undefined') return;
    
    // Core Web Vitals tracking
    let vitals = {
      CLS: 0,
      FID: 0,
      LCP: 0,
      FCP: 0,
      TTFB: 0
    };
    
    // Cumulative Layout Shift (CLS)
    function observeCLS() {
      let clsValue = 0;
      let clsEntries = [];
      
      const observer = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (!entry.hadRecentInput) {
            clsValue += entry.value;
            clsEntries.push(entry);
          }
        }
        vitals.CLS = clsValue;
      });
      
      observer.observe({ type: 'layout-shift', buffered: true });
    }
    
    // First Input Delay (FID)
    function observeFID() {
      const observer = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          vitals.FID = entry.processingStart - entry.startTime;
        }
      });
      
      observer.observe({ type: 'first-input', buffered: true });
    }
    
    // Largest Contentful Paint (LCP)
    function observeLCP() {
      const observer = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        const lastEntry = entries[entries.length - 1];
        vitals.LCP = lastEntry.startTime;
      });
      
      observer.observe({ type: 'largest-contentful-paint', buffered: true });
    }
    
    // First Contentful Paint (FCP)
    function observeFCP() {
      const observer = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (entry.name === 'first-contentful-paint') {
            vitals.FCP = entry.startTime;
          }
        }
      });
      
      observer.observe({ type: 'paint', buffered: true });
    }
    
    // Time to First Byte (TTFB)
    function observeTTFB() {
      const navigationEntry = performance.getEntriesByType('navigation')[0];
      if (navigationEntry) {
        vitals.TTFB = navigationEntry.responseStart - navigationEntry.requestStart;
      }
    }
    
    // Resource loading performance
    function monitorResources() {
      const observer = new PerformanceObserver((list) => {
        list.getEntries().forEach((entry) => {
          // Log slow resources
          if (entry.duration > 1000) {
            console.warn(`Slow resource: ${entry.name} took ${Math.round(entry.duration)}ms`);
          }
          
          // Log large resources
          if (entry.transferSize > 500 * 1024) { // 500KB
            console.warn(`Large resource: ${entry.name} is ${Math.round(entry.transferSize / 1024)}KB`);
          }
        });
      });
      
      observer.observe({ entryTypes: ['resource'] });
    }
    
    // Memory usage monitoring
    function monitorMemory() {
      if ('memory' in performance) {
        const memory = performance.memory;
        const memoryInfo = {
          used: Math.round(memory.usedJSHeapSize / 1048576), // MB
          total: Math.round(memory.totalJSHeapSize / 1048576), // MB
          limit: Math.round(memory.jsHeapSizeLimit / 1048576) // MB
        };
        
        // Warn if memory usage is high
        if (memoryInfo.used > 50) {
          console.warn(`High memory usage: ${memoryInfo.used}MB`);
        }
      }
    }
    
    // Send vitals to analytics (optional)
    function sendVitals() {
      // Only send in production
      if (process.env.NODE_ENV !== 'production') return;
      
      // Example: Send to Google Analytics
      if (typeof gtag !== 'undefined') {
        Object.entries(vitals).forEach(([metric, value]) => {
          gtag('event', metric, {
            event_category: 'Web Vitals',
            value: Math.round(value),
            non_interaction: true,
          });
        });
      }
      
      // Example: Send to custom analytics endpoint
      fetch('/api/analytics/vitals', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          url: window.location.href,
          vitals,
          timestamp: Date.now(),
          userAgent: navigator.userAgent
        })
      }).catch(() => {
        // Silently fail - analytics shouldn't break the site
      });
    }
    
    // Initialize all observers
    function init() {
      try {
        observeCLS();
        observeFID();
        observeLCP();
        observeFCP();
        observeTTFB();
        monitorResources();
        
        // Monitor memory every 30 seconds
        setInterval(monitorMemory, 30000);
        
        // Send vitals when page is about to unload
        window.addEventListener('beforeunload', sendVitals);
        
        // Also send vitals after 10 seconds for SPA navigation
        setTimeout(sendVitals, 10000);
        
      } catch (error) {
        console.warn('Performance monitoring failed:', error);
      }
    }
    
    // Start monitoring when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }
    
    // Expose vitals for debugging
    if (typeof window !== 'undefined') {
      window.__webVitals = vitals;
    }
  }
  
  // Initialize performance monitoring
  initPerformanceMonitoring();
</script>

{import.meta.env.DEV && (
  <div id="perf-debug" style="position: fixed; bottom: 10px; right: 10px; background: rgba(0,0,0,0.8); color: white; padding: 10px; border-radius: 5px; font-size: 12px; z-index: 9999; display: none;">
    <div>CLS: <span id="cls-value">-</span></div>
    <div>FID: <span id="fid-value">-</span>ms</div>
    <div>LCP: <span id="lcp-value">-</span>ms</div>
    <div>FCP: <span id="fcp-value">-</span>ms</div>
    <div>TTFB: <span id="ttfb-value">-</span>ms</div>
  </div>
)}

{import.meta.env.DEV && (
  <script>
    // @ts-nocheck
    // Development debug panel
    document.addEventListener('DOMContentLoaded', () => {
      const debugPanel = document.getElementById('perf-debug');
      if (!debugPanel) return;
      
      // Show panel on Ctrl+Shift+P
      document.addEventListener('keydown', (e) => {
        if (e.ctrlKey && e.shiftKey && e.key === 'P') {
          debugPanel.style.display = debugPanel.style.display === 'none' ? 'block' : 'none';
        }
      });
      
      // Update debug values
      setInterval(() => {
        if (window.__webVitals && debugPanel.style.display !== 'none') {
          const vitals = window.__webVitals;
          
          const clsEl = document.getElementById('cls-value');
          const fidEl = document.getElementById('fid-value');
          const lcpEl = document.getElementById('lcp-value');
          const fcpEl = document.getElementById('fcp-value');
          const ttfbEl = document.getElementById('ttfb-value');
          
          if (clsEl) clsEl.textContent = vitals.CLS.toFixed(3);
          if (fidEl) fidEl.textContent = Math.round(vitals.FID).toString();
          if (lcpEl) lcpEl.textContent = Math.round(vitals.LCP).toString();
          if (fcpEl) fcpEl.textContent = Math.round(vitals.FCP).toString();
          if (ttfbEl) ttfbEl.textContent = Math.round(vitals.TTFB).toString();
        }
      }, 1000);
    });
  </script>
)}

<style>
  /* Ensure performance monitoring doesn't affect layout */
  #perf-debug {
    pointer-events: none;
    user-select: none;
  }
</style>