---
import BaseLayout from './BaseLayout.astro';
import Header from '../components/Header.astro';
import TableOfContents from '../components/TableOfContents.astro';
import LikeButton from '../components/LikeButton.astro';
import PostNavigation from '../components/PostNavigation.astro';
import Logo from '../components/Logo.astro';

export interface Props {
  frontmatter: {
    title: string;
    description?: string;
    pubDate: string;
    updatedDate?: string;
    heroImage?: string;
    tags?: string[];
    author?: string;
  };
  headings?: Array<{
    depth: number;
    slug: string;
    text: string;
  }>;
  prevPost?: {
    slug: string;
    title: string;
    description?: string;
  };
  nextPost?: {
    slug: string;
    title: string;
    description?: string;
  };
}

const { frontmatter, headings = [], prevPost, nextPost } = Astro.props;
const { title, description, pubDate, updatedDate, heroImage, tags = [], author = 'Jongmin' } = frontmatter;

// 슬러그 생성 (URL에서 추출)
const pathParts = Astro.url.pathname.split('/').filter(part => part !== '');
const slug = pathParts[pathParts.length - 1] || '';

// 날짜 포맷팅
const formatDate = (date: string) => {
  return new Date(date).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};
---

<BaseLayout title={title} description={description}>
  <Header />
  <article class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
      <!-- 메인 콘텐츠 -->
      <div class="lg:col-span-3">
        <!-- 포스트 헤더 -->
        <header class="mb-8">
          {heroImage && (
            <div class="mb-8">
              <img
                src={heroImage}
                alt={title}
                class="w-full h-64 sm:h-80 object-cover rounded-lg shadow-lg"
                loading="lazy"
              />
            </div>
          )}
          
          <div class="space-y-4">
            <h1 class="text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-900 dark:text-dark-text leading-tight">
              {title}
            </h1>
            
            {description && (
              <p class="text-xl text-gray-600 dark:text-dark-subtext leading-relaxed">
                {description}
              </p>
            )}
            
            <!-- 메타 정보 -->
            <div class="flex flex-wrap items-center gap-4 text-sm text-gray-500 dark:text-dark-subtext">
              <div class="flex items-center space-x-2">
                <Logo size="sm" />
                <span class="font-medium">{author}</span>
              </div>
              
              <span>•</span>
              
              <time datetime={pubDate}>
                {formatDate(pubDate)}
              </time>
              
              {updatedDate && (
                <>
                  <span>•</span>
                  <span>Updated: {formatDate(updatedDate)}</span>
                </>
              )}
            </div>
            
            <!-- 태그 -->
            {tags.length > 0 && (
              <div class="flex flex-wrap gap-2">
                {tags.map((tag) => (
                  <a
                    href={`/tags/${tag}`}
                    class="inline-block px-3 py-1 bg-primary-100 dark:bg-dark-accent/20 text-primary-700 dark:text-dark-accent text-sm rounded-full hover:bg-primary-200 dark:hover:bg-dark-accent/30 transition-colors"
                  >
                    #{tag}
                  </a>
                ))}
              </div>
            )}
          </div>
        </header>
        
        <!-- 좋아요 버튼 -->
        <div class="mb-8">
          <LikeButton postSlug={slug} />
        </div>
        
        <!-- 포스트 내용 -->
        <div class="prose prose-lg dark:prose-dark max-w-none">
          <slot />
        </div>
        
        <!-- 포스트 네비게이션 -->
        <PostNavigation prevPost={prevPost} nextPost={nextPost} />
      </div>
      
      <!-- 사이드바 (TOC) -->
      <aside class="lg:col-span-1">
        <div class="lg:sticky lg:top-24 space-y-6">
          <TableOfContents headings={headings} />
          
          <!-- 작성자 정보 -->
          <div class="bg-white dark:bg-dark-surface rounded-lg shadow-sm border border-gray-200 dark:border-dark-border p-6">
            <div class="flex items-center space-x-4 mb-4">
              <Logo size="md" className="w-12 h-12" />
              <div>
                <h3 class="font-semibold text-gray-900 dark:text-dark-text">{author}</h3>
                <p class="text-sm text-gray-600 dark:text-dark-subtext">Developer</p>
              </div>
            </div>
            <p class="text-sm text-gray-600 dark:text-dark-subtext mb-4">
              A developer passionate about web development and emerging technologies.
            </p>
            <a
              href="/about"
              class="inline-flex items-center text-sm text-primary-600 dark:text-dark-accent hover:text-primary-700 dark:hover:text-dark-accentHover transition-colors"
            >
              Learn More
              <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          </div>
        </div>
      </aside>
    </div>
  </article>
</BaseLayout>

<script>
  // 코드 블록에 복사 버튼 추가
  document.addEventListener('DOMContentLoaded', () => {
    const codeBlocks = document.querySelectorAll('pre code');
    
    codeBlocks.forEach((codeBlock) => {
      const pre = codeBlock.parentElement;
      if (!pre) return;
      
      // 이미 복사 버튼이 있는지 확인
      if (pre.querySelector('.copy-button')) return;
      
      // 복사 버튼 생성
      const copyButton = document.createElement('button');
      copyButton.className = 'copy-button absolute top-3 right-3 flex items-center gap-1 px-2 py-1 bg-gray-800/90 hover:bg-gray-700 text-gray-300 hover:text-white rounded-md text-xs font-medium opacity-0 group-hover:opacity-100 transition-all duration-200 backdrop-blur-sm border border-gray-600/50 shadow-lg';
      copyButton.innerHTML = `
        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
        </svg>
        <span>Copy</span>
      `;
      copyButton.title = 'Copy code';
      
      // pre 요소를 relative로 설정하고 group 클래스 추가
      pre.style.position = 'relative';
      pre.classList.add('group');
      
      // 다크모드에서 코드 블록 스타일 개선
      pre.style.backgroundColor = 'var(--tw-prose-pre-bg)';
      pre.style.border = '1px solid #30363d';
      pre.style.borderRadius = '0.5rem';
      
      // 다크모드일 때 GitHub 다크 색상 적용
      if (document.documentElement.classList.contains('dark')) {
        pre.style.backgroundColor = '#161b22';
        pre.style.color = '#f0f6fc';
      }
      
      pre.appendChild(copyButton);
      
      // 복사 기능
      copyButton.addEventListener('click', async () => {
        const code = codeBlock.textContent || '';
        try {
          await navigator.clipboard.writeText(code);
          
          // 복사 완료 피드백
          const originalContent = copyButton.innerHTML;
          copyButton.className = copyButton.className.replace('bg-gray-800/90 hover:bg-gray-700', 'bg-green-600 hover:bg-green-600');
          copyButton.innerHTML = `
            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            <span>Copied!</span>
          `;
          
          setTimeout(() => {
            copyButton.className = copyButton.className.replace('bg-green-600 hover:bg-green-600', 'bg-gray-800/90 hover:bg-gray-700');
            copyButton.innerHTML = originalContent;
          }, 2000);
        } catch (err) {
          console.error('Failed to copy code:', err);
        }
      });
    });
  });
</script>

<style>
  /* 다크모드에서 코드 블록 스타일 개선 */
  .dark pre {
    background-color: #161b22 !important;
    border: 1px solid #30363d !important;
    color: #f0f6fc !important;
  }
  
  .dark pre code {
    background-color: transparent !important;
    color: inherit !important;
  }
  
  /* 코드 블록 선택 영역 스타일 */
  .dark pre ::selection {
    background-color: #30363d;
    color: #f0f6fc;
  }
  
  .dark pre ::-moz-selection {
    background-color: #30363d;
    color: #f0f6fc;
  }
  
  /* 스크롤바 스타일 */
  .dark pre::-webkit-scrollbar {
    height: 8px;
    width: 8px;
  }
  
  .dark pre::-webkit-scrollbar-track {
    background: #161b22;
    border-radius: 4px;
  }
  
  .dark pre::-webkit-scrollbar-thumb {
    background: #30363d;
    border-radius: 4px;
  }
  
  .dark pre::-webkit-scrollbar-thumb:hover {
    background: #8b949e;
  }
  
  /* 인라인 코드 스타일 */
  .dark :not(pre) > code {
    background-color: #21262d !important;
    color: #f0f6fc !important;
    padding: 0.125rem 0.25rem !important;
    border-radius: 0.25rem !important;
  }
</style>